@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using PushNotificationClient.Class

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);


        var IsOnLine = await localStorage.GetItemAsync<bool>("ConnectionStatus");

        if (IsOnLine)
        {
            await GetToken();
        }


        if (firstRender)
            await RequestNotificationSubscriptionAsync();

    }

    private async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazoring.requestSubscription");
        if (subscription != null)
        {
            await SubscribeToNotifications(subscription);
        }
    }

    public async Task SubscribeToNotifications(NotificationSubscription subscription)
    {
        var IsOnLine = await localStorage.GetItemAsync<bool>("ConnectionStatus");

        if (IsOnLine)
        {
            var JWToken = await localStorage.GetItemAsync<string>("JWT");

            Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + JWToken);
            var response = await Http.PostAsJsonAsync("api/NotificationSubscribe", subscription);
            //response.EnsureSuccessStatusCode();

        }


    }

    public async Task GetToken()
    {
        var JWToken = await localStorage.GetItemAsync<string>("JWT");

        if (JWToken == null)
        {
            UserInfo oUser = new UserInfo();

            oUser.Email = "sss@dd.com";
            oUser.Password = "eeee";

            var response = await Http.PostAsJsonAsync("api/Token", oUser);
            var message = response.Content.ReadAsStringAsync();

            await localStorage.SetItemAsync("JWT", message.Result);
        }

    }


}